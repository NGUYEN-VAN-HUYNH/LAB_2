
STM32F_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002ed8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002ed8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f8  00000000  00000000  00028bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001435  00000000  00000000  0002b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a40e  00000000  00000000  0002cb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822fb  00000000  00000000  00036f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b920e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000b9264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e84 	.word	0x08002e84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e84 	.word	0x08002e84

0800014c <setTimer10>:
extern int index_led_matrix; // Chỉ số LED đang hiển thị
int timer10_counter = 0;
int timer10_flag = 0;
int shift_index;

void setTimer10(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer10_counter = duration;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <setTimer10+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <setTimer10+0x24>)
 800015c:	2200      	movs	r2, #0
 800015e:	601a      	str	r2, [r3, #0]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028
 8000170:	2000002c 	.word	0x2000002c

08000174 <timerRun10>:

void timerRun10(){
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	if(timer10_counter > 0){
 8000178:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <timerRun10+0x2c>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	dd0b      	ble.n	8000198 <timerRun10+0x24>
		timer10_counter --;
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <timerRun10+0x2c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	3b01      	subs	r3, #1
 8000186:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <timerRun10+0x2c>)
 8000188:	6013      	str	r3, [r2, #0]
		if(timer10_counter <= 0){
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <timerRun10+0x2c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	dc02      	bgt.n	8000198 <timerRun10+0x24>
			timer10_flag = 1;
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <timerRun10+0x30>)
 8000194:	2201      	movs	r2, #1
 8000196:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000028 	.word	0x20000028
 80001a4:	2000002c 	.word	0x2000002c

080001a8 <H>:

void H(int index) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001b6:	48c7      	ldr	r0, [pc, #796]	; (80004d4 <H+0x32c>)
 80001b8:	f001 fe68 	bl	8001e8c <HAL_GPIO_WritePin>
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	f200 81c1 	bhi.w	8000546 <H+0x39e>
 80001c4:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <H+0x24>)
 80001c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ca:	bf00      	nop
 80001cc:	080001ed 	.word	0x080001ed
 80001d0:	08000257 	.word	0x08000257
 80001d4:	080002c1 	.word	0x080002c1
 80001d8:	0800032b 	.word	0x0800032b
 80001dc:	08000395 	.word	0x08000395
 80001e0:	080003ff 	.word	0x080003ff
 80001e4:	08000469 	.word	0x08000469
 80001e8:	080004dd 	.word	0x080004dd
   // GPIOB->ODR = (matrix_buffer[index] << 8);  // Dữ liệu hàng xuất ra từ PB8 tới PB15 (điều khiển hàng)

    // Kích hoạt cột tương ứng (ENM0 -> ENM7)
    switch (index) {
        case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2104      	movs	r1, #4
 80001f0:	48b9      	ldr	r0, [pc, #740]	; (80004d8 <H+0x330>)
 80001f2:	f001 fe4b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2108      	movs	r1, #8
 80001fa:	48b7      	ldr	r0, [pc, #732]	; (80004d8 <H+0x330>)
 80001fc:	f001 fe46 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	48b4      	ldr	r0, [pc, #720]	; (80004d8 <H+0x330>)
 8000208:	f001 fe40 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000212:	48b1      	ldr	r0, [pc, #708]	; (80004d8 <H+0x330>)
 8000214:	f001 fe3a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021e:	48ae      	ldr	r0, [pc, #696]	; (80004d8 <H+0x330>)
 8000220:	f001 fe34 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	48ab      	ldr	r0, [pc, #684]	; (80004d8 <H+0x330>)
 800022c:	f001 fe2e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	48a8      	ldr	r0, [pc, #672]	; (80004d8 <H+0x330>)
 8000238:	f001 fe28 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000242:	48a5      	ldr	r0, [pc, #660]	; (80004d8 <H+0x330>)
 8000244:	f001 fe22 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024e:	48a1      	ldr	r0, [pc, #644]	; (80004d4 <H+0x32c>)
 8000250:	f001 fe1c 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000254:	e177      	b.n	8000546 <H+0x39e>
        case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2104      	movs	r1, #4
 800025a:	489f      	ldr	r0, [pc, #636]	; (80004d8 <H+0x330>)
 800025c:	f001 fe16 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	489c      	ldr	r0, [pc, #624]	; (80004d8 <H+0x330>)
 8000266:	f001 fe11 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4899      	ldr	r0, [pc, #612]	; (80004d8 <H+0x330>)
 8000272:	f001 fe0b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027c:	4896      	ldr	r0, [pc, #600]	; (80004d8 <H+0x330>)
 800027e:	f001 fe05 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	4893      	ldr	r0, [pc, #588]	; (80004d8 <H+0x330>)
 800028a:	f001 fdff 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000294:	4890      	ldr	r0, [pc, #576]	; (80004d8 <H+0x330>)
 8000296:	f001 fdf9 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a0:	488d      	ldr	r0, [pc, #564]	; (80004d8 <H+0x330>)
 80002a2:	f001 fdf3 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ac:	488a      	ldr	r0, [pc, #552]	; (80004d8 <H+0x330>)
 80002ae:	f001 fded 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4886      	ldr	r0, [pc, #536]	; (80004d4 <H+0x32c>)
 80002ba:	f001 fde7 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80002be:	e142      	b.n	8000546 <H+0x39e>
        case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2104      	movs	r1, #4
 80002c4:	4884      	ldr	r0, [pc, #528]	; (80004d8 <H+0x330>)
 80002c6:	f001 fde1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4882      	ldr	r0, [pc, #520]	; (80004d8 <H+0x330>)
 80002d0:	f001 fddc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002da:	487f      	ldr	r0, [pc, #508]	; (80004d8 <H+0x330>)
 80002dc:	f001 fdd6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e6:	487c      	ldr	r0, [pc, #496]	; (80004d8 <H+0x330>)
 80002e8:	f001 fdd0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f2:	4879      	ldr	r0, [pc, #484]	; (80004d8 <H+0x330>)
 80002f4:	f001 fdca 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4876      	ldr	r0, [pc, #472]	; (80004d8 <H+0x330>)
 8000300:	f001 fdc4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030a:	4873      	ldr	r0, [pc, #460]	; (80004d8 <H+0x330>)
 800030c:	f001 fdbe 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000316:	4870      	ldr	r0, [pc, #448]	; (80004d8 <H+0x330>)
 8000318:	f001 fdb8 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000322:	486c      	ldr	r0, [pc, #432]	; (80004d4 <H+0x32c>)
 8000324:	f001 fdb2 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000328:	e10d      	b.n	8000546 <H+0x39e>
        case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2104      	movs	r1, #4
 800032e:	486a      	ldr	r0, [pc, #424]	; (80004d8 <H+0x330>)
 8000330:	f001 fdac 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2108      	movs	r1, #8
 8000338:	4867      	ldr	r0, [pc, #412]	; (80004d8 <H+0x330>)
 800033a:	f001 fda7 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000344:	4864      	ldr	r0, [pc, #400]	; (80004d8 <H+0x330>)
 8000346:	f001 fda1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000350:	4861      	ldr	r0, [pc, #388]	; (80004d8 <H+0x330>)
 8000352:	f001 fd9b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035c:	485e      	ldr	r0, [pc, #376]	; (80004d8 <H+0x330>)
 800035e:	f001 fd95 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000368:	485b      	ldr	r0, [pc, #364]	; (80004d8 <H+0x330>)
 800036a:	f001 fd8f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000374:	4858      	ldr	r0, [pc, #352]	; (80004d8 <H+0x330>)
 8000376:	f001 fd89 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000380:	4855      	ldr	r0, [pc, #340]	; (80004d8 <H+0x330>)
 8000382:	f001 fd83 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038c:	4851      	ldr	r0, [pc, #324]	; (80004d4 <H+0x32c>)
 800038e:	f001 fd7d 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000392:	e0d8      	b.n	8000546 <H+0x39e>
        case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2104      	movs	r1, #4
 8000398:	484f      	ldr	r0, [pc, #316]	; (80004d8 <H+0x330>)
 800039a:	f001 fd77 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2108      	movs	r1, #8
 80003a2:	484d      	ldr	r0, [pc, #308]	; (80004d8 <H+0x330>)
 80003a4:	f001 fd72 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	484a      	ldr	r0, [pc, #296]	; (80004d8 <H+0x330>)
 80003b0:	f001 fd6c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ba:	4847      	ldr	r0, [pc, #284]	; (80004d8 <H+0x330>)
 80003bc:	f001 fd66 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	4844      	ldr	r0, [pc, #272]	; (80004d8 <H+0x330>)
 80003c8:	f001 fd60 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <H+0x330>)
 80003d4:	f001 fd5a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003de:	483e      	ldr	r0, [pc, #248]	; (80004d8 <H+0x330>)
 80003e0:	f001 fd54 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ea:	483b      	ldr	r0, [pc, #236]	; (80004d8 <H+0x330>)
 80003ec:	f001 fd4e 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f6:	4837      	ldr	r0, [pc, #220]	; (80004d4 <H+0x32c>)
 80003f8:	f001 fd48 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80003fc:	e0a3      	b.n	8000546 <H+0x39e>
        case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2104      	movs	r1, #4
 8000402:	4835      	ldr	r0, [pc, #212]	; (80004d8 <H+0x330>)
 8000404:	f001 fd42 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2108      	movs	r1, #8
 800040c:	4832      	ldr	r0, [pc, #200]	; (80004d8 <H+0x330>)
 800040e:	f001 fd3d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	482f      	ldr	r0, [pc, #188]	; (80004d8 <H+0x330>)
 800041a:	f001 fd37 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000424:	482c      	ldr	r0, [pc, #176]	; (80004d8 <H+0x330>)
 8000426:	f001 fd31 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4829      	ldr	r0, [pc, #164]	; (80004d8 <H+0x330>)
 8000432:	f001 fd2b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	4826      	ldr	r0, [pc, #152]	; (80004d8 <H+0x330>)
 800043e:	f001 fd25 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000448:	4823      	ldr	r0, [pc, #140]	; (80004d8 <H+0x330>)
 800044a:	f001 fd1f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000454:	4820      	ldr	r0, [pc, #128]	; (80004d8 <H+0x330>)
 8000456:	f001 fd19 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <H+0x32c>)
 8000462:	f001 fd13 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000466:	e06e      	b.n	8000546 <H+0x39e>
        case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2104      	movs	r1, #4
 800046c:	481a      	ldr	r0, [pc, #104]	; (80004d8 <H+0x330>)
 800046e:	f001 fd0d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2108      	movs	r1, #8
 8000476:	4818      	ldr	r0, [pc, #96]	; (80004d8 <H+0x330>)
 8000478:	f001 fd08 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <H+0x330>)
 8000484:	f001 fd02 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800048e:	4812      	ldr	r0, [pc, #72]	; (80004d8 <H+0x330>)
 8000490:	f001 fcfc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800049a:	480f      	ldr	r0, [pc, #60]	; (80004d8 <H+0x330>)
 800049c:	f001 fcf6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	480c      	ldr	r0, [pc, #48]	; (80004d8 <H+0x330>)
 80004a8:	f001 fcf0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <H+0x330>)
 80004b4:	f001 fcea 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <H+0x330>)
 80004c0:	f001 fce4 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <H+0x32c>)
 80004cc:	f001 fcde 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80004d0:	e039      	b.n	8000546 <H+0x39e>
 80004d2:	bf00      	nop
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40010800 	.word	0x40010800
        case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2104      	movs	r1, #4
 80004e0:	481b      	ldr	r0, [pc, #108]	; (8000550 <H+0x3a8>)
 80004e2:	f001 fcd3 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <H+0x3a8>)
 80004ec:	f001 fcce 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f6:	4816      	ldr	r0, [pc, #88]	; (8000550 <H+0x3a8>)
 80004f8:	f001 fcc8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <H+0x3a8>)
 8000504:	f001 fcc2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <H+0x3a8>)
 8000510:	f001 fcbc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <H+0x3a8>)
 800051c:	f001 fcb6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <H+0x3a8>)
 8000528:	f001 fcb0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <H+0x3a8>)
 8000534:	f001 fcaa 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <H+0x3ac>)
 8000540:	f001 fca4 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000544:	bf00      	nop
    }
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <C>:


void C(int index) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000566:	48c7      	ldr	r0, [pc, #796]	; (8000884 <C+0x32c>)
 8000568:	f001 fc90 	bl	8001e8c <HAL_GPIO_WritePin>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b07      	cmp	r3, #7
 8000570:	f200 81c1 	bhi.w	80008f6 <C+0x39e>
 8000574:	a201      	add	r2, pc, #4	; (adr r2, 800057c <C+0x24>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	0800059d 	.word	0x0800059d
 8000580:	08000607 	.word	0x08000607
 8000584:	08000671 	.word	0x08000671
 8000588:	080006db 	.word	0x080006db
 800058c:	08000745 	.word	0x08000745
 8000590:	080007af 	.word	0x080007af
 8000594:	08000819 	.word	0x08000819
 8000598:	0800088d 	.word	0x0800088d
   // GPIOB->ODR = (matrix_buffer[index] << 8);  // Dữ liệu hàng xuất ra từ PB8 tới PB15 (điều khiển hàng)

    // Kích hoạt cột tương ứng (ENM0 -> ENM7)
    switch (index) {
        case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2104      	movs	r1, #4
 80005a0:	48b9      	ldr	r0, [pc, #740]	; (8000888 <C+0x330>)
 80005a2:	f001 fc73 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2108      	movs	r1, #8
 80005aa:	48b7      	ldr	r0, [pc, #732]	; (8000888 <C+0x330>)
 80005ac:	f001 fc6e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b6:	48b4      	ldr	r0, [pc, #720]	; (8000888 <C+0x330>)
 80005b8:	f001 fc68 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c2:	48b1      	ldr	r0, [pc, #708]	; (8000888 <C+0x330>)
 80005c4:	f001 fc62 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	48ae      	ldr	r0, [pc, #696]	; (8000888 <C+0x330>)
 80005d0:	f001 fc5c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	48ab      	ldr	r0, [pc, #684]	; (8000888 <C+0x330>)
 80005dc:	f001 fc56 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	48a8      	ldr	r0, [pc, #672]	; (8000888 <C+0x330>)
 80005e8:	f001 fc50 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	48a5      	ldr	r0, [pc, #660]	; (8000888 <C+0x330>)
 80005f4:	f001 fc4a 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	48a1      	ldr	r0, [pc, #644]	; (8000884 <C+0x32c>)
 8000600:	f001 fc44 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000604:	e177      	b.n	80008f6 <C+0x39e>
        case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2104      	movs	r1, #4
 800060a:	489f      	ldr	r0, [pc, #636]	; (8000888 <C+0x330>)
 800060c:	f001 fc3e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2108      	movs	r1, #8
 8000614:	489c      	ldr	r0, [pc, #624]	; (8000888 <C+0x330>)
 8000616:	f001 fc39 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	4899      	ldr	r0, [pc, #612]	; (8000888 <C+0x330>)
 8000622:	f001 fc33 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062c:	4896      	ldr	r0, [pc, #600]	; (8000888 <C+0x330>)
 800062e:	f001 fc2d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000638:	4893      	ldr	r0, [pc, #588]	; (8000888 <C+0x330>)
 800063a:	f001 fc27 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4890      	ldr	r0, [pc, #576]	; (8000888 <C+0x330>)
 8000646:	f001 fc21 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000650:	488d      	ldr	r0, [pc, #564]	; (8000888 <C+0x330>)
 8000652:	f001 fc1b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065c:	488a      	ldr	r0, [pc, #552]	; (8000888 <C+0x330>)
 800065e:	f001 fc15 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000668:	4886      	ldr	r0, [pc, #536]	; (8000884 <C+0x32c>)
 800066a:	f001 fc0f 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 800066e:	e142      	b.n	80008f6 <C+0x39e>
        case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2104      	movs	r1, #4
 8000674:	4884      	ldr	r0, [pc, #528]	; (8000888 <C+0x330>)
 8000676:	f001 fc09 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4882      	ldr	r0, [pc, #520]	; (8000888 <C+0x330>)
 8000680:	f001 fc04 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	487f      	ldr	r0, [pc, #508]	; (8000888 <C+0x330>)
 800068c:	f001 fbfe 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000696:	487c      	ldr	r0, [pc, #496]	; (8000888 <C+0x330>)
 8000698:	f001 fbf8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	4879      	ldr	r0, [pc, #484]	; (8000888 <C+0x330>)
 80006a4:	f001 fbf2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4876      	ldr	r0, [pc, #472]	; (8000888 <C+0x330>)
 80006b0:	f001 fbec 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	4873      	ldr	r0, [pc, #460]	; (8000888 <C+0x330>)
 80006bc:	f001 fbe6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c6:	4870      	ldr	r0, [pc, #448]	; (8000888 <C+0x330>)
 80006c8:	f001 fbe0 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	486c      	ldr	r0, [pc, #432]	; (8000884 <C+0x32c>)
 80006d4:	f001 fbda 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80006d8:	e10d      	b.n	80008f6 <C+0x39e>
        case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2104      	movs	r1, #4
 80006de:	486a      	ldr	r0, [pc, #424]	; (8000888 <C+0x330>)
 80006e0:	f001 fbd4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4867      	ldr	r0, [pc, #412]	; (8000888 <C+0x330>)
 80006ea:	f001 fbcf 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	4864      	ldr	r0, [pc, #400]	; (8000888 <C+0x330>)
 80006f6:	f001 fbc9 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000700:	4861      	ldr	r0, [pc, #388]	; (8000888 <C+0x330>)
 8000702:	f001 fbc3 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	485e      	ldr	r0, [pc, #376]	; (8000888 <C+0x330>)
 800070e:	f001 fbbd 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000718:	485b      	ldr	r0, [pc, #364]	; (8000888 <C+0x330>)
 800071a:	f001 fbb7 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4858      	ldr	r0, [pc, #352]	; (8000888 <C+0x330>)
 8000726:	f001 fbb1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	4855      	ldr	r0, [pc, #340]	; (8000888 <C+0x330>)
 8000732:	f001 fbab 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073c:	4851      	ldr	r0, [pc, #324]	; (8000884 <C+0x32c>)
 800073e:	f001 fba5 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000742:	e0d8      	b.n	80008f6 <C+0x39e>
        case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2104      	movs	r1, #4
 8000748:	484f      	ldr	r0, [pc, #316]	; (8000888 <C+0x330>)
 800074a:	f001 fb9f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	484d      	ldr	r0, [pc, #308]	; (8000888 <C+0x330>)
 8000754:	f001 fb9a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075e:	484a      	ldr	r0, [pc, #296]	; (8000888 <C+0x330>)
 8000760:	f001 fb94 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	4847      	ldr	r0, [pc, #284]	; (8000888 <C+0x330>)
 800076c:	f001 fb8e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000776:	4844      	ldr	r0, [pc, #272]	; (8000888 <C+0x330>)
 8000778:	f001 fb88 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	4841      	ldr	r0, [pc, #260]	; (8000888 <C+0x330>)
 8000784:	f001 fb82 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078e:	483e      	ldr	r0, [pc, #248]	; (8000888 <C+0x330>)
 8000790:	f001 fb7c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079a:	483b      	ldr	r0, [pc, #236]	; (8000888 <C+0x330>)
 800079c:	f001 fb76 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a6:	4837      	ldr	r0, [pc, #220]	; (8000884 <C+0x32c>)
 80007a8:	f001 fb70 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80007ac:	e0a3      	b.n	80008f6 <C+0x39e>
        case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	4835      	ldr	r0, [pc, #212]	; (8000888 <C+0x330>)
 80007b4:	f001 fb6a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2108      	movs	r1, #8
 80007bc:	4832      	ldr	r0, [pc, #200]	; (8000888 <C+0x330>)
 80007be:	f001 fb65 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c8:	482f      	ldr	r0, [pc, #188]	; (8000888 <C+0x330>)
 80007ca:	f001 fb5f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <C+0x330>)
 80007d6:	f001 fb59 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e0:	4829      	ldr	r0, [pc, #164]	; (8000888 <C+0x330>)
 80007e2:	f001 fb53 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ec:	4826      	ldr	r0, [pc, #152]	; (8000888 <C+0x330>)
 80007ee:	f001 fb4d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f8:	4823      	ldr	r0, [pc, #140]	; (8000888 <C+0x330>)
 80007fa:	f001 fb47 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000804:	4820      	ldr	r0, [pc, #128]	; (8000888 <C+0x330>)
 8000806:	f001 fb41 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <C+0x32c>)
 8000812:	f001 fb3b 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000816:	e06e      	b.n	80008f6 <C+0x39e>
        case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2104      	movs	r1, #4
 800081c:	481a      	ldr	r0, [pc, #104]	; (8000888 <C+0x330>)
 800081e:	f001 fb35 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2108      	movs	r1, #8
 8000826:	4818      	ldr	r0, [pc, #96]	; (8000888 <C+0x330>)
 8000828:	f001 fb30 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	4815      	ldr	r0, [pc, #84]	; (8000888 <C+0x330>)
 8000834:	f001 fb2a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <C+0x330>)
 8000840:	f001 fb24 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <C+0x330>)
 800084c:	f001 fb1e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <C+0x330>)
 8000858:	f001 fb18 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <C+0x330>)
 8000864:	f001 fb12 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <C+0x330>)
 8000870:	f001 fb0c 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	4802      	ldr	r0, [pc, #8]	; (8000884 <C+0x32c>)
 800087c:	f001 fb06 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000880:	e039      	b.n	80008f6 <C+0x39e>
 8000882:	bf00      	nop
 8000884:	40010c00 	.word	0x40010c00
 8000888:	40010800 	.word	0x40010800
        case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	481b      	ldr	r0, [pc, #108]	; (8000900 <C+0x3a8>)
 8000892:	f001 fafb 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2108      	movs	r1, #8
 800089a:	4819      	ldr	r0, [pc, #100]	; (8000900 <C+0x3a8>)
 800089c:	f001 faf6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	4816      	ldr	r0, [pc, #88]	; (8000900 <C+0x3a8>)
 80008a8:	f001 faf0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <C+0x3a8>)
 80008b4:	f001 faea 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <C+0x3a8>)
 80008c0:	f001 fae4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <C+0x3a8>)
 80008cc:	f001 fade 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <C+0x3a8>)
 80008d8:	f001 fad8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <C+0x3a8>)
 80008e4:	f001 fad2 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <C+0x3ac>)
 80008f0:	f001 facc 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80008f4:	bf00      	nop
    }
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010800 	.word	0x40010800
 8000904:	40010c00 	.word	0x40010c00

08000908 <M>:




void M(int index) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000916:	48c7      	ldr	r0, [pc, #796]	; (8000c34 <M+0x32c>)
 8000918:	f001 fab8 	bl	8001e8c <HAL_GPIO_WritePin>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b07      	cmp	r3, #7
 8000920:	f200 81c1 	bhi.w	8000ca6 <M+0x39e>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <M+0x24>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	0800094d 	.word	0x0800094d
 8000930:	080009b7 	.word	0x080009b7
 8000934:	08000a21 	.word	0x08000a21
 8000938:	08000a8b 	.word	0x08000a8b
 800093c:	08000af5 	.word	0x08000af5
 8000940:	08000b5f 	.word	0x08000b5f
 8000944:	08000bc9 	.word	0x08000bc9
 8000948:	08000c3d 	.word	0x08000c3d
    // Gửi dữ liệu đến các hàng (ROW0 -> ROW7) thông qua cổng B
   // GPIOB->ODR = (matrix_buffer[index] << 8);  // Dữ liệu hàng xuất ra từ PB8 tới PB15 (điều khiển hàng)
    // Kích hoạt cột tương ứng (ENM0 -> ENM7)
    switch (index) {
        case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2104      	movs	r1, #4
 8000950:	48b9      	ldr	r0, [pc, #740]	; (8000c38 <M+0x330>)
 8000952:	f001 fa9b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2108      	movs	r1, #8
 800095a:	48b7      	ldr	r0, [pc, #732]	; (8000c38 <M+0x330>)
 800095c:	f001 fa96 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	48b4      	ldr	r0, [pc, #720]	; (8000c38 <M+0x330>)
 8000968:	f001 fa90 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000972:	48b1      	ldr	r0, [pc, #708]	; (8000c38 <M+0x330>)
 8000974:	f001 fa8a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097e:	48ae      	ldr	r0, [pc, #696]	; (8000c38 <M+0x330>)
 8000980:	f001 fa84 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	48ab      	ldr	r0, [pc, #684]	; (8000c38 <M+0x330>)
 800098c:	f001 fa7e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000996:	48a8      	ldr	r0, [pc, #672]	; (8000c38 <M+0x330>)
 8000998:	f001 fa78 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	48a5      	ldr	r0, [pc, #660]	; (8000c38 <M+0x330>)
 80009a4:	f001 fa72 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	48a1      	ldr	r0, [pc, #644]	; (8000c34 <M+0x32c>)
 80009b0:	f001 fa6c 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80009b4:	e177      	b.n	8000ca6 <M+0x39e>
        case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2104      	movs	r1, #4
 80009ba:	489f      	ldr	r0, [pc, #636]	; (8000c38 <M+0x330>)
 80009bc:	f001 fa66 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2108      	movs	r1, #8
 80009c4:	489c      	ldr	r0, [pc, #624]	; (8000c38 <M+0x330>)
 80009c6:	f001 fa61 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d0:	4899      	ldr	r0, [pc, #612]	; (8000c38 <M+0x330>)
 80009d2:	f001 fa5b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	4896      	ldr	r0, [pc, #600]	; (8000c38 <M+0x330>)
 80009de:	f001 fa55 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e8:	4893      	ldr	r0, [pc, #588]	; (8000c38 <M+0x330>)
 80009ea:	f001 fa4f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	4890      	ldr	r0, [pc, #576]	; (8000c38 <M+0x330>)
 80009f6:	f001 fa49 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a00:	488d      	ldr	r0, [pc, #564]	; (8000c38 <M+0x330>)
 8000a02:	f001 fa43 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0c:	488a      	ldr	r0, [pc, #552]	; (8000c38 <M+0x330>)
 8000a0e:	f001 fa3d 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a18:	4886      	ldr	r0, [pc, #536]	; (8000c34 <M+0x32c>)
 8000a1a:	f001 fa37 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000a1e:	e142      	b.n	8000ca6 <M+0x39e>
        case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2104      	movs	r1, #4
 8000a24:	4884      	ldr	r0, [pc, #528]	; (8000c38 <M+0x330>)
 8000a26:	f001 fa31 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4882      	ldr	r0, [pc, #520]	; (8000c38 <M+0x330>)
 8000a30:	f001 fa2c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	487f      	ldr	r0, [pc, #508]	; (8000c38 <M+0x330>)
 8000a3c:	f001 fa26 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a46:	487c      	ldr	r0, [pc, #496]	; (8000c38 <M+0x330>)
 8000a48:	f001 fa20 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a52:	4879      	ldr	r0, [pc, #484]	; (8000c38 <M+0x330>)
 8000a54:	f001 fa1a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4876      	ldr	r0, [pc, #472]	; (8000c38 <M+0x330>)
 8000a60:	f001 fa14 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4873      	ldr	r0, [pc, #460]	; (8000c38 <M+0x330>)
 8000a6c:	f001 fa0e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a76:	4870      	ldr	r0, [pc, #448]	; (8000c38 <M+0x330>)
 8000a78:	f001 fa08 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a82:	486c      	ldr	r0, [pc, #432]	; (8000c34 <M+0x32c>)
 8000a84:	f001 fa02 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000a88:	e10d      	b.n	8000ca6 <M+0x39e>
        case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	486a      	ldr	r0, [pc, #424]	; (8000c38 <M+0x330>)
 8000a90:	f001 f9fc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	4867      	ldr	r0, [pc, #412]	; (8000c38 <M+0x330>)
 8000a9a:	f001 f9f7 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4864      	ldr	r0, [pc, #400]	; (8000c38 <M+0x330>)
 8000aa6:	f001 f9f1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	4861      	ldr	r0, [pc, #388]	; (8000c38 <M+0x330>)
 8000ab2:	f001 f9eb 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	485e      	ldr	r0, [pc, #376]	; (8000c38 <M+0x330>)
 8000abe:	f001 f9e5 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	485b      	ldr	r0, [pc, #364]	; (8000c38 <M+0x330>)
 8000aca:	f001 f9df 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad4:	4858      	ldr	r0, [pc, #352]	; (8000c38 <M+0x330>)
 8000ad6:	f001 f9d9 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	4855      	ldr	r0, [pc, #340]	; (8000c38 <M+0x330>)
 8000ae2:	f001 f9d3 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aec:	4851      	ldr	r0, [pc, #324]	; (8000c34 <M+0x32c>)
 8000aee:	f001 f9cd 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000af2:	e0d8      	b.n	8000ca6 <M+0x39e>
        case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2104      	movs	r1, #4
 8000af8:	484f      	ldr	r0, [pc, #316]	; (8000c38 <M+0x330>)
 8000afa:	f001 f9c7 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	484d      	ldr	r0, [pc, #308]	; (8000c38 <M+0x330>)
 8000b04:	f001 f9c2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0e:	484a      	ldr	r0, [pc, #296]	; (8000c38 <M+0x330>)
 8000b10:	f001 f9bc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1a:	4847      	ldr	r0, [pc, #284]	; (8000c38 <M+0x330>)
 8000b1c:	f001 f9b6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4844      	ldr	r0, [pc, #272]	; (8000c38 <M+0x330>)
 8000b28:	f001 f9b0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	4841      	ldr	r0, [pc, #260]	; (8000c38 <M+0x330>)
 8000b34:	f001 f9aa 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3e:	483e      	ldr	r0, [pc, #248]	; (8000c38 <M+0x330>)
 8000b40:	f001 f9a4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4a:	483b      	ldr	r0, [pc, #236]	; (8000c38 <M+0x330>)
 8000b4c:	f001 f99e 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	4837      	ldr	r0, [pc, #220]	; (8000c34 <M+0x32c>)
 8000b58:	f001 f998 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000b5c:	e0a3      	b.n	8000ca6 <M+0x39e>
        case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4835      	ldr	r0, [pc, #212]	; (8000c38 <M+0x330>)
 8000b64:	f001 f992 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4832      	ldr	r0, [pc, #200]	; (8000c38 <M+0x330>)
 8000b6e:	f001 f98d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	482f      	ldr	r0, [pc, #188]	; (8000c38 <M+0x330>)
 8000b7a:	f001 f987 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	482c      	ldr	r0, [pc, #176]	; (8000c38 <M+0x330>)
 8000b86:	f001 f981 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b90:	4829      	ldr	r0, [pc, #164]	; (8000c38 <M+0x330>)
 8000b92:	f001 f97b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	4826      	ldr	r0, [pc, #152]	; (8000c38 <M+0x330>)
 8000b9e:	f001 f975 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <M+0x330>)
 8000baa:	f001 f96f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb4:	4820      	ldr	r0, [pc, #128]	; (8000c38 <M+0x330>)
 8000bb6:	f001 f969 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <M+0x32c>)
 8000bc2:	f001 f963 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000bc6:	e06e      	b.n	8000ca6 <M+0x39e>
        case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2104      	movs	r1, #4
 8000bcc:	481a      	ldr	r0, [pc, #104]	; (8000c38 <M+0x330>)
 8000bce:	f001 f95d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4818      	ldr	r0, [pc, #96]	; (8000c38 <M+0x330>)
 8000bd8:	f001 f958 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <M+0x330>)
 8000be4:	f001 f952 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <M+0x330>)
 8000bf0:	f001 f94c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <M+0x330>)
 8000bfc:	f001 f946 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <M+0x330>)
 8000c08:	f001 f940 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <M+0x330>)
 8000c14:	f001 f93a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <M+0x330>)
 8000c20:	f001 f934 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	4802      	ldr	r0, [pc, #8]	; (8000c34 <M+0x32c>)
 8000c2c:	f001 f92e 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000c30:	e039      	b.n	8000ca6 <M+0x39e>
 8000c32:	bf00      	nop
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40010800 	.word	0x40010800
        case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2104      	movs	r1, #4
 8000c40:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <M+0x3a8>)
 8000c42:	f001 f923 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <M+0x3a8>)
 8000c4c:	f001 f91e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <M+0x3a8>)
 8000c58:	f001 f918 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <M+0x3a8>)
 8000c64:	f001 f912 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <M+0x3a8>)
 8000c70:	f001 f90c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <M+0x3a8>)
 8000c7c:	f001 f906 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c86:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <M+0x3a8>)
 8000c88:	f001 f900 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <M+0x3a8>)
 8000c94:	f001 f8fa 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <M+0x3ac>)
 8000ca0:	f001 f8f4 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000ca4:	bf00      	nop
    }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <U>:

void U(int index) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cc6:	48c7      	ldr	r0, [pc, #796]	; (8000fe4 <U+0x32c>)
 8000cc8:	f001 f8e0 	bl	8001e8c <HAL_GPIO_WritePin>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b07      	cmp	r3, #7
 8000cd0:	f200 81c1 	bhi.w	8001056 <U+0x39e>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <U+0x24>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000cfd 	.word	0x08000cfd
 8000ce0:	08000d67 	.word	0x08000d67
 8000ce4:	08000dd1 	.word	0x08000dd1
 8000ce8:	08000e3b 	.word	0x08000e3b
 8000cec:	08000ea5 	.word	0x08000ea5
 8000cf0:	08000f0f 	.word	0x08000f0f
 8000cf4:	08000f79 	.word	0x08000f79
 8000cf8:	08000fed 	.word	0x08000fed
   // GPIOB->ODR = (matrix_buffer[index] << 8);  // Dữ liệu hàng xuất ra từ PB8 tới PB15 (điều khiển hàng)

    // Kích hoạt cột tương ứng (ENM0 -> ENM7)
    switch (index) {
        case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2104      	movs	r1, #4
 8000d00:	48b9      	ldr	r0, [pc, #740]	; (8000fe8 <U+0x330>)
 8000d02:	f001 f8c3 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2108      	movs	r1, #8
 8000d0a:	48b7      	ldr	r0, [pc, #732]	; (8000fe8 <U+0x330>)
 8000d0c:	f001 f8be 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	48b4      	ldr	r0, [pc, #720]	; (8000fe8 <U+0x330>)
 8000d18:	f001 f8b8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d22:	48b1      	ldr	r0, [pc, #708]	; (8000fe8 <U+0x330>)
 8000d24:	f001 f8b2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2e:	48ae      	ldr	r0, [pc, #696]	; (8000fe8 <U+0x330>)
 8000d30:	f001 f8ac 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	48ab      	ldr	r0, [pc, #684]	; (8000fe8 <U+0x330>)
 8000d3c:	f001 f8a6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	48a8      	ldr	r0, [pc, #672]	; (8000fe8 <U+0x330>)
 8000d48:	f001 f8a0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d52:	48a5      	ldr	r0, [pc, #660]	; (8000fe8 <U+0x330>)
 8000d54:	f001 f89a 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5e:	48a1      	ldr	r0, [pc, #644]	; (8000fe4 <U+0x32c>)
 8000d60:	f001 f894 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000d64:	e177      	b.n	8001056 <U+0x39e>
        case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2104      	movs	r1, #4
 8000d6a:	489f      	ldr	r0, [pc, #636]	; (8000fe8 <U+0x330>)
 8000d6c:	f001 f88e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2108      	movs	r1, #8
 8000d74:	489c      	ldr	r0, [pc, #624]	; (8000fe8 <U+0x330>)
 8000d76:	f001 f889 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	4899      	ldr	r0, [pc, #612]	; (8000fe8 <U+0x330>)
 8000d82:	f001 f883 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4896      	ldr	r0, [pc, #600]	; (8000fe8 <U+0x330>)
 8000d8e:	f001 f87d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4893      	ldr	r0, [pc, #588]	; (8000fe8 <U+0x330>)
 8000d9a:	f001 f877 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4890      	ldr	r0, [pc, #576]	; (8000fe8 <U+0x330>)
 8000da6:	f001 f871 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db0:	488d      	ldr	r0, [pc, #564]	; (8000fe8 <U+0x330>)
 8000db2:	f001 f86b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbc:	488a      	ldr	r0, [pc, #552]	; (8000fe8 <U+0x330>)
 8000dbe:	f001 f865 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc8:	4886      	ldr	r0, [pc, #536]	; (8000fe4 <U+0x32c>)
 8000dca:	f001 f85f 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000dce:	e142      	b.n	8001056 <U+0x39e>
        case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4884      	ldr	r0, [pc, #528]	; (8000fe8 <U+0x330>)
 8000dd6:	f001 f859 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4882      	ldr	r0, [pc, #520]	; (8000fe8 <U+0x330>)
 8000de0:	f001 f854 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	487f      	ldr	r0, [pc, #508]	; (8000fe8 <U+0x330>)
 8000dec:	f001 f84e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df6:	487c      	ldr	r0, [pc, #496]	; (8000fe8 <U+0x330>)
 8000df8:	f001 f848 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e02:	4879      	ldr	r0, [pc, #484]	; (8000fe8 <U+0x330>)
 8000e04:	f001 f842 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0e:	4876      	ldr	r0, [pc, #472]	; (8000fe8 <U+0x330>)
 8000e10:	f001 f83c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	4873      	ldr	r0, [pc, #460]	; (8000fe8 <U+0x330>)
 8000e1c:	f001 f836 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <U+0x330>)
 8000e28:	f001 f830 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	486c      	ldr	r0, [pc, #432]	; (8000fe4 <U+0x32c>)
 8000e34:	f001 f82a 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000e38:	e10d      	b.n	8001056 <U+0x39e>
        case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	486a      	ldr	r0, [pc, #424]	; (8000fe8 <U+0x330>)
 8000e40:	f001 f824 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	4867      	ldr	r0, [pc, #412]	; (8000fe8 <U+0x330>)
 8000e4a:	f001 f81f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	4864      	ldr	r0, [pc, #400]	; (8000fe8 <U+0x330>)
 8000e56:	f001 f819 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	4861      	ldr	r0, [pc, #388]	; (8000fe8 <U+0x330>)
 8000e62:	f001 f813 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	485e      	ldr	r0, [pc, #376]	; (8000fe8 <U+0x330>)
 8000e6e:	f001 f80d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	485b      	ldr	r0, [pc, #364]	; (8000fe8 <U+0x330>)
 8000e7a:	f001 f807 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e84:	4858      	ldr	r0, [pc, #352]	; (8000fe8 <U+0x330>)
 8000e86:	f001 f801 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	4855      	ldr	r0, [pc, #340]	; (8000fe8 <U+0x330>)
 8000e92:	f000 fffb 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9c:	4851      	ldr	r0, [pc, #324]	; (8000fe4 <U+0x32c>)
 8000e9e:	f000 fff5 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000ea2:	e0d8      	b.n	8001056 <U+0x39e>
        case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	484f      	ldr	r0, [pc, #316]	; (8000fe8 <U+0x330>)
 8000eaa:	f000 ffef 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	484d      	ldr	r0, [pc, #308]	; (8000fe8 <U+0x330>)
 8000eb4:	f000 ffea 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	484a      	ldr	r0, [pc, #296]	; (8000fe8 <U+0x330>)
 8000ec0:	f000 ffe4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eca:	4847      	ldr	r0, [pc, #284]	; (8000fe8 <U+0x330>)
 8000ecc:	f000 ffde 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	4844      	ldr	r0, [pc, #272]	; (8000fe8 <U+0x330>)
 8000ed8:	f000 ffd8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	4841      	ldr	r0, [pc, #260]	; (8000fe8 <U+0x330>)
 8000ee4:	f000 ffd2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eee:	483e      	ldr	r0, [pc, #248]	; (8000fe8 <U+0x330>)
 8000ef0:	f000 ffcc 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efa:	483b      	ldr	r0, [pc, #236]	; (8000fe8 <U+0x330>)
 8000efc:	f000 ffc6 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4837      	ldr	r0, [pc, #220]	; (8000fe4 <U+0x32c>)
 8000f08:	f000 ffc0 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000f0c:	e0a3      	b.n	8001056 <U+0x39e>
        case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2104      	movs	r1, #4
 8000f12:	4835      	ldr	r0, [pc, #212]	; (8000fe8 <U+0x330>)
 8000f14:	f000 ffba 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <U+0x330>)
 8000f1e:	f000 ffb5 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	482f      	ldr	r0, [pc, #188]	; (8000fe8 <U+0x330>)
 8000f2a:	f000 ffaf 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f34:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <U+0x330>)
 8000f36:	f000 ffa9 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4829      	ldr	r0, [pc, #164]	; (8000fe8 <U+0x330>)
 8000f42:	f000 ffa3 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <U+0x330>)
 8000f4e:	f000 ff9d 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <U+0x330>)
 8000f5a:	f000 ff97 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f64:	4820      	ldr	r0, [pc, #128]	; (8000fe8 <U+0x330>)
 8000f66:	f000 ff91 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <U+0x32c>)
 8000f72:	f000 ff8b 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000f76:	e06e      	b.n	8001056 <U+0x39e>
        case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <U+0x330>)
 8000f7e:	f000 ff85 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	4818      	ldr	r0, [pc, #96]	; (8000fe8 <U+0x330>)
 8000f88:	f000 ff80 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4815      	ldr	r0, [pc, #84]	; (8000fe8 <U+0x330>)
 8000f94:	f000 ff7a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <U+0x330>)
 8000fa0:	f000 ff74 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000faa:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <U+0x330>)
 8000fac:	f000 ff6e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <U+0x330>)
 8000fb8:	f000 ff68 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <U+0x330>)
 8000fc4:	f000 ff62 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <U+0x330>)
 8000fd0:	f000 ff5c 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <U+0x32c>)
 8000fdc:	f000 ff56 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8000fe0:	e039      	b.n	8001056 <U+0x39e>
 8000fe2:	bf00      	nop
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40010800 	.word	0x40010800
        case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2104      	movs	r1, #4
 8000ff0:	481b      	ldr	r0, [pc, #108]	; (8001060 <U+0x3a8>)
 8000ff2:	f000 ff4b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4819      	ldr	r0, [pc, #100]	; (8001060 <U+0x3a8>)
 8000ffc:	f000 ff46 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4816      	ldr	r0, [pc, #88]	; (8001060 <U+0x3a8>)
 8001008:	f000 ff40 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <U+0x3a8>)
 8001014:	f000 ff3a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <U+0x3a8>)
 8001020:	f000 ff34 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <U+0x3a8>)
 800102c:	f000 ff2e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <U+0x3a8>)
 8001038:	f000 ff28 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <U+0x3a8>)
 8001044:	f000 ff22 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <U+0x3ac>)
 8001050:	f000 ff1c 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001054:	bf00      	nop
    }
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40010800 	.word	0x40010800
 8001064:	40010c00 	.word	0x40010c00

08001068 <T>:

void T(int index) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001076:	48c7      	ldr	r0, [pc, #796]	; (8001394 <T+0x32c>)
 8001078:	f000 ff08 	bl	8001e8c <HAL_GPIO_WritePin>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b07      	cmp	r3, #7
 8001080:	f200 81c1 	bhi.w	8001406 <T+0x39e>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <T+0x24>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010ad 	.word	0x080010ad
 8001090:	08001117 	.word	0x08001117
 8001094:	08001181 	.word	0x08001181
 8001098:	080011eb 	.word	0x080011eb
 800109c:	08001255 	.word	0x08001255
 80010a0:	080012bf 	.word	0x080012bf
 80010a4:	08001329 	.word	0x08001329
 80010a8:	0800139d 	.word	0x0800139d
   // GPIOB->ODR = (matrix_buffer[index] << 8);  // Dữ liệu hàng xuất ra từ PB8 tới PB15 (điều khiển hàng)

    // Kích hoạt cột tương ứng (ENM0 -> ENM7)
    switch (index) {
        case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2104      	movs	r1, #4
 80010b0:	48b9      	ldr	r0, [pc, #740]	; (8001398 <T+0x330>)
 80010b2:	f000 feeb 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2108      	movs	r1, #8
 80010ba:	48b7      	ldr	r0, [pc, #732]	; (8001398 <T+0x330>)
 80010bc:	f000 fee6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	48b4      	ldr	r0, [pc, #720]	; (8001398 <T+0x330>)
 80010c8:	f000 fee0 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	48b1      	ldr	r0, [pc, #708]	; (8001398 <T+0x330>)
 80010d4:	f000 feda 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010de:	48ae      	ldr	r0, [pc, #696]	; (8001398 <T+0x330>)
 80010e0:	f000 fed4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ea:	48ab      	ldr	r0, [pc, #684]	; (8001398 <T+0x330>)
 80010ec:	f000 fece 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f6:	48a8      	ldr	r0, [pc, #672]	; (8001398 <T+0x330>)
 80010f8:	f000 fec8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001102:	48a5      	ldr	r0, [pc, #660]	; (8001398 <T+0x330>)
 8001104:	f000 fec2 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	48a1      	ldr	r0, [pc, #644]	; (8001394 <T+0x32c>)
 8001110:	f000 febc 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001114:	e177      	b.n	8001406 <T+0x39e>
        case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2104      	movs	r1, #4
 800111a:	489f      	ldr	r0, [pc, #636]	; (8001398 <T+0x330>)
 800111c:	f000 feb6 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	489c      	ldr	r0, [pc, #624]	; (8001398 <T+0x330>)
 8001126:	f000 feb1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001130:	4899      	ldr	r0, [pc, #612]	; (8001398 <T+0x330>)
 8001132:	f000 feab 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113c:	4896      	ldr	r0, [pc, #600]	; (8001398 <T+0x330>)
 800113e:	f000 fea5 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4893      	ldr	r0, [pc, #588]	; (8001398 <T+0x330>)
 800114a:	f000 fe9f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4890      	ldr	r0, [pc, #576]	; (8001398 <T+0x330>)
 8001156:	f000 fe99 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	488d      	ldr	r0, [pc, #564]	; (8001398 <T+0x330>)
 8001162:	f000 fe93 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	488a      	ldr	r0, [pc, #552]	; (8001398 <T+0x330>)
 800116e:	f000 fe8d 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	4886      	ldr	r0, [pc, #536]	; (8001394 <T+0x32c>)
 800117a:	f000 fe87 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 800117e:	e142      	b.n	8001406 <T+0x39e>
        case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2104      	movs	r1, #4
 8001184:	4884      	ldr	r0, [pc, #528]	; (8001398 <T+0x330>)
 8001186:	f000 fe81 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2108      	movs	r1, #8
 800118e:	4882      	ldr	r0, [pc, #520]	; (8001398 <T+0x330>)
 8001190:	f000 fe7c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	487f      	ldr	r0, [pc, #508]	; (8001398 <T+0x330>)
 800119c:	f000 fe76 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a6:	487c      	ldr	r0, [pc, #496]	; (8001398 <T+0x330>)
 80011a8:	f000 fe70 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	4879      	ldr	r0, [pc, #484]	; (8001398 <T+0x330>)
 80011b4:	f000 fe6a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	4876      	ldr	r0, [pc, #472]	; (8001398 <T+0x330>)
 80011c0:	f000 fe64 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ca:	4873      	ldr	r0, [pc, #460]	; (8001398 <T+0x330>)
 80011cc:	f000 fe5e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d6:	4870      	ldr	r0, [pc, #448]	; (8001398 <T+0x330>)
 80011d8:	f000 fe58 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	486c      	ldr	r0, [pc, #432]	; (8001394 <T+0x32c>)
 80011e4:	f000 fe52 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80011e8:	e10d      	b.n	8001406 <T+0x39e>
        case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2104      	movs	r1, #4
 80011ee:	486a      	ldr	r0, [pc, #424]	; (8001398 <T+0x330>)
 80011f0:	f000 fe4c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	4867      	ldr	r0, [pc, #412]	; (8001398 <T+0x330>)
 80011fa:	f000 fe47 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001204:	4864      	ldr	r0, [pc, #400]	; (8001398 <T+0x330>)
 8001206:	f000 fe41 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001210:	4861      	ldr	r0, [pc, #388]	; (8001398 <T+0x330>)
 8001212:	f000 fe3b 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121c:	485e      	ldr	r0, [pc, #376]	; (8001398 <T+0x330>)
 800121e:	f000 fe35 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	485b      	ldr	r0, [pc, #364]	; (8001398 <T+0x330>)
 800122a:	f000 fe2f 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001234:	4858      	ldr	r0, [pc, #352]	; (8001398 <T+0x330>)
 8001236:	f000 fe29 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001240:	4855      	ldr	r0, [pc, #340]	; (8001398 <T+0x330>)
 8001242:	f000 fe23 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	4851      	ldr	r0, [pc, #324]	; (8001394 <T+0x32c>)
 800124e:	f000 fe1d 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001252:	e0d8      	b.n	8001406 <T+0x39e>
        case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2104      	movs	r1, #4
 8001258:	484f      	ldr	r0, [pc, #316]	; (8001398 <T+0x330>)
 800125a:	f000 fe17 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2108      	movs	r1, #8
 8001262:	484d      	ldr	r0, [pc, #308]	; (8001398 <T+0x330>)
 8001264:	f000 fe12 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	484a      	ldr	r0, [pc, #296]	; (8001398 <T+0x330>)
 8001270:	f000 fe0c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	4847      	ldr	r0, [pc, #284]	; (8001398 <T+0x330>)
 800127c:	f000 fe06 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	4844      	ldr	r0, [pc, #272]	; (8001398 <T+0x330>)
 8001288:	f000 fe00 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	4841      	ldr	r0, [pc, #260]	; (8001398 <T+0x330>)
 8001294:	f000 fdfa 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129e:	483e      	ldr	r0, [pc, #248]	; (8001398 <T+0x330>)
 80012a0:	f000 fdf4 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	483b      	ldr	r0, [pc, #236]	; (8001398 <T+0x330>)
 80012ac:	f000 fdee 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	4837      	ldr	r0, [pc, #220]	; (8001394 <T+0x32c>)
 80012b8:	f000 fde8 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 80012bc:	e0a3      	b.n	8001406 <T+0x39e>
        case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2104      	movs	r1, #4
 80012c2:	4835      	ldr	r0, [pc, #212]	; (8001398 <T+0x330>)
 80012c4:	f000 fde2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2108      	movs	r1, #8
 80012cc:	4832      	ldr	r0, [pc, #200]	; (8001398 <T+0x330>)
 80012ce:	f000 fddd 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	482f      	ldr	r0, [pc, #188]	; (8001398 <T+0x330>)
 80012da:	f000 fdd7 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e4:	482c      	ldr	r0, [pc, #176]	; (8001398 <T+0x330>)
 80012e6:	f000 fdd1 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4829      	ldr	r0, [pc, #164]	; (8001398 <T+0x330>)
 80012f2:	f000 fdcb 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fc:	4826      	ldr	r0, [pc, #152]	; (8001398 <T+0x330>)
 80012fe:	f000 fdc5 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <T+0x330>)
 800130a:	f000 fdbf 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001314:	4820      	ldr	r0, [pc, #128]	; (8001398 <T+0x330>)
 8001316:	f000 fdb9 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <T+0x32c>)
 8001322:	f000 fdb3 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001326:	e06e      	b.n	8001406 <T+0x39e>
        case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2104      	movs	r1, #4
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <T+0x330>)
 800132e:	f000 fdad 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2108      	movs	r1, #8
 8001336:	4818      	ldr	r0, [pc, #96]	; (8001398 <T+0x330>)
 8001338:	f000 fda8 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <T+0x330>)
 8001344:	f000 fda2 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134e:	4812      	ldr	r0, [pc, #72]	; (8001398 <T+0x330>)
 8001350:	f000 fd9c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <T+0x330>)
 800135c:	f000 fd96 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <T+0x330>)
 8001368:	f000 fd90 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <T+0x330>)
 8001374:	f000 fd8a 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <T+0x330>)
 8001380:	f000 fd84 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <T+0x32c>)
 800138c:	f000 fd7e 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001390:	e039      	b.n	8001406 <T+0x39e>
 8001392:	bf00      	nop
 8001394:	40010c00 	.word	0x40010c00
 8001398:	40010800 	.word	0x40010800
        case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2104      	movs	r1, #4
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <T+0x3a8>)
 80013a2:	f000 fd73 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2108      	movs	r1, #8
 80013aa:	4819      	ldr	r0, [pc, #100]	; (8001410 <T+0x3a8>)
 80013ac:	f000 fd6e 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	4816      	ldr	r0, [pc, #88]	; (8001410 <T+0x3a8>)
 80013b8:	f000 fd68 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <T+0x3a8>)
 80013c4:	f000 fd62 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <T+0x3a8>)
 80013d0:	f000 fd5c 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <T+0x3a8>)
 80013dc:	f000 fd56 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <T+0x3a8>)
 80013e8:	f000 fd50 	bl	8001e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <T+0x3a8>)
 80013f4:	f000 fd4a 	bl	8001e8c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <T+0x3ac>)
 8001400:	f000 fd44 	bl	8001e8c <HAL_GPIO_WritePin>
        	break;
 8001404:	bf00      	nop
    }
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010800 	.word	0x40010800
 8001414:	40010c00 	.word	0x40010c00

08001418 <init_exercise10>:
// Khởi tạo bài tập 10
void init_exercise10() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    // Khởi tạo cho bài tập (nếu cần thiết)
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <exercise10_run>:

// Hàm chạy bài tập 10
void exercise10_run() {
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
    // Gọi hàm updateLEDMatrix để cập nhật hàng tương ứng trong ma trận LED
    // Di chuyển đến hàng tiếp theo
   // index_led_matrix = (index_led_matrix + 1) % MAX_LED_MATRIX;  // Lặp lại từ 0 sau khi quét hết 8 hàng
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 init_exercise10();
 8001436:	f7ff ffef 	bl	8001418 <init_exercise10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 fa3d 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f899 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 f91f 	bl	8001684 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001446:	f000 f8d1 	bl	80015ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800144a:	4845      	ldr	r0, [pc, #276]	; (8001560 <main+0x130>)
 800144c:	f001 f962 	bl	8002714 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer10(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f7fe fe7b 	bl	800014c <setTimer10>
  // tat het led truoc khi chay
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4842      	ldr	r0, [pc, #264]	; (8001564 <main+0x134>)
 800145c:	f000 fd16 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	483f      	ldr	r0, [pc, #252]	; (8001564 <main+0x134>)
 8001466:	f000 fd11 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	483c      	ldr	r0, [pc, #240]	; (8001564 <main+0x134>)
 8001472:	f000 fd0b 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	4839      	ldr	r0, [pc, #228]	; (8001564 <main+0x134>)
 800147e:	f000 fd05 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2110      	movs	r1, #16
 8001486:	4837      	ldr	r0, [pc, #220]	; (8001564 <main+0x134>)
 8001488:	f000 fd00 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4834      	ldr	r0, [pc, #208]	; (8001564 <main+0x134>)
 8001492:	f000 fcfb 	bl	8001e8c <HAL_GPIO_WritePin>
  int counter = 1000;
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	607b      	str	r3, [r7, #4]
  while (1)
  {
	if (timer10_flag == 1){
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <main+0x138>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d1fb      	bne.n	800149c <main+0x6c>
		exercise10_run();
 80014a4:	f7ff ffbe 	bl	8001424 <exercise10_run>
		counter--;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
		if(800 < counter && counter <= 1000){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014b4:	dd09      	ble.n	80014ca <main+0x9a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014bc:	dc05      	bgt.n	80014ca <main+0x9a>
			H(index_led_matrix);
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <main+0x13c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe70 	bl	80001a8 <H>
 80014c8:	e03a      	b.n	8001540 <main+0x110>
		}
		else if(600 < counter && counter <= 800)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80014d0:	dd09      	ble.n	80014e6 <main+0xb6>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014d8:	dc05      	bgt.n	80014e6 <main+0xb6>
			C(index_led_matrix);
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <main+0x13c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f83a 	bl	8000558 <C>
 80014e4:	e02c      	b.n	8001540 <main+0x110>
		else if(400 < counter && counter <= 600)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80014ec:	dd09      	ble.n	8001502 <main+0xd2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80014f4:	dc05      	bgt.n	8001502 <main+0xd2>
			M(index_led_matrix);
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <main+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa04 	bl	8000908 <M>
 8001500:	e01e      	b.n	8001540 <main+0x110>
		else if(200 < counter && counter <= 400)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2bc8      	cmp	r3, #200	; 0xc8
 8001506:	dd09      	ble.n	800151c <main+0xec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800150e:	dc05      	bgt.n	800151c <main+0xec>
			U(index_led_matrix);
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <main+0x13c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fbcf 	bl	8000cb8 <U>
 800151a:	e011      	b.n	8001540 <main+0x110>
		else if(0 < counter && counter <= 200)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	dd08      	ble.n	8001534 <main+0x104>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2bc8      	cmp	r3, #200	; 0xc8
 8001526:	dc05      	bgt.n	8001534 <main+0x104>
			T(index_led_matrix);
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <main+0x13c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd9b 	bl	8001068 <T>
 8001532:	e005      	b.n	8001540 <main+0x110>
		else if (counter == 0) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <main+0x110>
			counter = 1000;
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	607b      	str	r3, [r7, #4]
		}
		index_led_matrix = (index_led_matrix + 1) % MAX_LED_MATRIX;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <main+0x13c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <main+0x140>)
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	fb93 f1f2 	sdiv	r1, r3, r2
 800154e:	fb02 f201 	mul.w	r2, r2, r1
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	4a05      	ldr	r2, [pc, #20]	; (800156c <main+0x13c>)
 8001556:	6013      	str	r3, [r2, #0]
		setTimer10(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f7fe fdf7 	bl	800014c <setTimer10>
	if (timer10_flag == 1){
 800155e:	e79d      	b.n	800149c <main+0x6c>
 8001560:	20000034 	.word	0x20000034
 8001564:	40010800 	.word	0x40010800
 8001568:	2000002c 	.word	0x2000002c
 800156c:	20000030 	.word	0x20000030
 8001570:	08002e9c 	.word	0x08002e9c

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fc76 	bl	8002e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159e:	2310      	movs	r3, #16
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fc86 	bl	8001ebc <HAL_RCC_OscConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015b6:	f000 f8c5 	bl	8001744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fef2 	bl	80023bc <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015de:	f000 f8b1 	bl	8001744 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM2_Init+0x94>)
 800160a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_TIM2_Init+0x94>)
 8001612:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_TIM2_Init+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM2_Init+0x94>)
 8001620:	2209      	movs	r2, #9
 8001622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_TIM2_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM2_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_TIM2_Init+0x94>)
 8001632:	f001 f81f 	bl	8002674 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800163c:	f000 f882 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM2_Init+0x94>)
 800164e:	f001 f99d 	bl	800298c <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 f874 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM2_Init+0x94>)
 800166a:	f001 fb75 	bl	8002d58 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f866 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000034 	.word	0x20000034

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_GPIO_Init+0xa0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a21      	ldr	r2, [pc, #132]	; (8001724 <MX_GPIO_Init+0xa0>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_GPIO_Init+0xa0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_GPIO_Init+0xa0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <MX_GPIO_Init+0xa0>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_GPIO_Init+0xa0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80016c8:	2200      	movs	r2, #0
 80016ca:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016d0:	f000 fbdc 	bl	8001e8c <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80016d4:	2200      	movs	r2, #0
 80016d6:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80016da:	4814      	ldr	r0, [pc, #80]	; (800172c <MX_GPIO_Init+0xa8>)
 80016dc:	f000 fbd6 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80016e0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80016e4:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4619      	mov	r1, r3
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016fa:	f000 fa4d 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80016fe:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001702:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4619      	mov	r1, r3
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_GPIO_Init+0xa8>)
 8001718:	f000 fa3e 	bl	8001b98 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00

08001730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 timerRun10();
 8001738:	f7fe fd1c 	bl	8000174 <timerRun10>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d113      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201c      	movs	r0, #28
 80017e4:	f000 f9a1 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e8:	201c      	movs	r0, #28
 80017ea:	f000 f9ba 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f87f 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM2_IRQHandler+0x10>)
 8001852:	f000 ffab 	bl	80027ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000034 	.word	0x20000034

08001860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff fff8 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001872:	490c      	ldr	r1, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001888:	4c09      	ldr	r4, [pc, #36]	; (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f001 fac9 	bl	8002e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fdc9 	bl	8001430 <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018a8:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 80018ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018b0:	20000080 	.word	0x20000080

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f923 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff ff3c 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f93b 	bl	8001b7e <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f903 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000000 	.word	0x20000000
 800193c:	20000008 	.word	0x20000008
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x1c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x20>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_IncTick+0x20>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000008 	.word	0x20000008
 8001964:	2000007c 	.word	0x2000007c

08001968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b02      	ldr	r3, [pc, #8]	; (8001978 <HAL_GetTick+0x10>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	2000007c 	.word	0x2000007c

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4906      	ldr	r1, [pc, #24]	; (8001a14 <__NVIC_EnableIRQ+0x34>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff90 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff2d 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff42 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff35 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e148      	b.n	8001e3e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bac:	2201      	movs	r2, #1
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 8137 	bne.w	8001e38 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4aa3      	ldr	r2, [pc, #652]	; (8001e5c <HAL_GPIO_Init+0x2c4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d05e      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bd4:	4aa1      	ldr	r2, [pc, #644]	; (8001e5c <HAL_GPIO_Init+0x2c4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d875      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bda:	4aa1      	ldr	r2, [pc, #644]	; (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d058      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001be0:	4a9f      	ldr	r2, [pc, #636]	; (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d86f      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001be6:	4a9f      	ldr	r2, [pc, #636]	; (8001e64 <HAL_GPIO_Init+0x2cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d052      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bec:	4a9d      	ldr	r2, [pc, #628]	; (8001e64 <HAL_GPIO_Init+0x2cc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d869      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a9d      	ldr	r2, [pc, #628]	; (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04c      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bf8:	4a9b      	ldr	r2, [pc, #620]	; (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d863      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <HAL_GPIO_Init+0x2d4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d046      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001c04:	4a99      	ldr	r2, [pc, #612]	; (8001e6c <HAL_GPIO_Init+0x2d4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d85d      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d82a      	bhi.n	8001c64 <HAL_GPIO_Init+0xcc>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d859      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <HAL_GPIO_Init+0x80>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001c6d 	.word	0x08001c6d
 8001c20:	08001c7f 	.word	0x08001c7f
 8001c24:	08001cc1 	.word	0x08001cc1
 8001c28:	08001cc7 	.word	0x08001cc7
 8001c2c:	08001cc7 	.word	0x08001cc7
 8001c30:	08001cc7 	.word	0x08001cc7
 8001c34:	08001cc7 	.word	0x08001cc7
 8001c38:	08001cc7 	.word	0x08001cc7
 8001c3c:	08001cc7 	.word	0x08001cc7
 8001c40:	08001cc7 	.word	0x08001cc7
 8001c44:	08001cc7 	.word	0x08001cc7
 8001c48:	08001cc7 	.word	0x08001cc7
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001cc7 	.word	0x08001cc7
 8001c54:	08001cc7 	.word	0x08001cc7
 8001c58:	08001cc7 	.word	0x08001cc7
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c89 	.word	0x08001c89
 8001c64:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <HAL_GPIO_Init+0x2d8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6a:	e02c      	b.n	8001cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e029      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e024      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	3308      	adds	r3, #8
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e01f      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e01a      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	623b      	str	r3, [r7, #32]
          break;
 8001c9e:	e013      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	611a      	str	r2, [r3, #16]
          break;
 8001cb2:	e009      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	615a      	str	r2, [r3, #20]
          break;
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          break;
 8001cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d801      	bhi.n	8001cd2 <HAL_GPIO_Init+0x13a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	e001      	b.n	8001cd6 <HAL_GPIO_Init+0x13e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_GPIO_Init+0x14c>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x152>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	3b08      	subs	r3, #8
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8090 	beq.w	8001e38 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_GPIO_Init+0x2e0>)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1e0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a48      	ldr	r2, [pc, #288]	; (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1dc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1d8>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1e2>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1e2>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1e2>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d8a:	493b      	ldr	r1, [pc, #236]	; (8001e78 <HAL_GPIO_Init+0x2e0>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4933      	ldr	r1, [pc, #204]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	492d      	ldr	r1, [pc, #180]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4929      	ldr	r1, [pc, #164]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4923      	ldr	r1, [pc, #140]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	491f      	ldr	r1, [pc, #124]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4919      	ldr	r1, [pc, #100]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4915      	ldr	r1, [pc, #84]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f47f aeaf 	bne.w	8001bac <HAL_GPIO_Init+0x14>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	372c      	adds	r7, #44	; 0x2c
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	10320000 	.word	0x10320000
 8001e60:	10310000 	.word	0x10310000
 8001e64:	10220000 	.word	0x10220000
 8001e68:	10210000 	.word	0x10210000
 8001e6c:	10120000 	.word	0x10120000
 8001e70:	10110000 	.word	0x10110000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e26c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8087 	beq.w	8001fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001edc:	4b92      	ldr	r3, [pc, #584]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee8:	4b8f      	ldr	r3, [pc, #572]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d112      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d168      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e246      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x76>
 8001f24:	4b80      	ldr	r3, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a7f      	ldr	r2, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b7b      	ldr	r3, [pc, #492]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7a      	ldr	r2, [pc, #488]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a77      	ldr	r2, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xbc>
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a71      	ldr	r2, [pc, #452]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f78:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a67      	ldr	r2, [pc, #412]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fce6 	bl	8001968 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fce2 	bl	8001968 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1fa      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe4>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fcd2 	bl	8001968 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fcce 	bl	8001968 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1e6      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x10c>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
 800200e:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1ba      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4939      	ldr	r1, [pc, #228]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e03a      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x270>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff fc87 	bl	8001968 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fc83 	bl	8001968 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e19b      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4927      	ldr	r1, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x270>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fc66 	bl	8001968 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fc62 	bl	8001968 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e17a      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03a      	beq.n	8002140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d019      	beq.n	8002106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x274>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fc46 	bl	8001968 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fc42 	bl	8001968 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e15a      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f000 fa9a 	bl	8002638 <RCC_Delay>
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_OscConfig+0x274>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7ff fc2c 	bl	8001968 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002112:	e00f      	b.n	8002134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7ff fc28 	bl	8001968 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d908      	bls.n	8002134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e140      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	42420000 	.word	0x42420000
 8002130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e9      	bne.n	8002114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a6 	beq.w	800229a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b97      	ldr	r3, [pc, #604]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a93      	ldr	r2, [pc, #588]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b91      	ldr	r3, [pc, #580]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b8e      	ldr	r3, [pc, #568]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b8b      	ldr	r3, [pc, #556]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a8a      	ldr	r2, [pc, #552]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff fbe9 	bl	8001968 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff fbe5 	bl	8001968 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0fd      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b81      	ldr	r3, [pc, #516]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x312>
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x334>
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x356>
 80021f8:	4b6d      	ldr	r3, [pc, #436]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a6c      	ldr	r2, [pc, #432]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a69      	ldr	r2, [pc, #420]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a66      	ldr	r2, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a63      	ldr	r2, [pc, #396]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fb99 	bl	8001968 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff fb95 	bl	8001968 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0ab      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x37e>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fb83 	bl	8001968 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff fb7f 	bl	8001968 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e095      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8081 	beq.w	80023a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d061      	beq.n	8002374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d146      	bne.n	8002346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7ff fb53 	bl	8001968 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff fb4f 	bl	8001968 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e067      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d108      	bne.n	8002300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	492d      	ldr	r1, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a19      	ldr	r1, [r3, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	430b      	orrs	r3, r1
 8002312:	4927      	ldr	r1, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fb23 	bl	8001968 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff fb1f 	bl	8001968 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e037      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x46a>
 8002344:	e02f      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fb0c 	bl	8001968 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fb08 	bl	8001968 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e020      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x498>
 8002372:	e018      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e013      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42420060 	.word	0x42420060

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7ff fa5c 	bl	8001968 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7ff fa58 	bl	8001968 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f9ba 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08002ea0 	.word	0x08002ea0
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
 80025be:	e027      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	e027      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c5b      	lsrs	r3, r3, #17
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025f2:	fb02 f203 	mul.w	r2, r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	613b      	str	r3, [r7, #16]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	08002eb0 	.word	0x08002eb0
 8002630:	08002ec0 	.word	0x08002ec0
 8002634:	003d0900 	.word	0x003d0900

08002638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <RCC_Delay+0x34>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <RCC_Delay+0x38>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002654:	bf00      	nop
  }
  while (Delay --);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <RCC_Delay+0x1c>
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	20000000 	.word	0x20000000
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e041      	b.n	800270a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff f88a 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 fa56 	bl	8002b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d001      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e035      	b.n	8002798 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_TIM_Base_Start_IT+0x90>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x4e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d004      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x4e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIM_Base_Start_IT+0x94>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d111      	bne.n	8002786 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d010      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	e007      	b.n	8002796 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400

080027ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d020      	beq.n	8002810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0202 	mvn.w	r2, #2
 80027e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f998 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f98b 	bl	8002b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f99a 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d020      	beq.n	800285c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0204 	mvn.w	r2, #4
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f972 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f965 	bl	8002b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f974 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0208 	mvn.w	r2, #8
 8002878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f94c 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f93f 	bl	8002b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f94e 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0210 	mvn.w	r2, #16
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f926 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f919 	bl	8002b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f928 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0201 	mvn.w	r2, #1
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe ff0c 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa6f 	bl	8002e1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8f8 	bl	8002b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0220 	mvn.w	r2, #32
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa42 	bl	8002e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIM_ConfigClockSource+0x1c>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0b4      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x186>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e0:	d03e      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0xd4>
 80029e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e6:	f200 8087 	bhi.w	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	f000 8086 	beq.w	8002afe <HAL_TIM_ConfigClockSource+0x172>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	d87f      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b70      	cmp	r3, #112	; 0x70
 80029fa:	d01a      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0xa6>
 80029fc:	2b70      	cmp	r3, #112	; 0x70
 80029fe:	d87b      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b60      	cmp	r3, #96	; 0x60
 8002a02:	d050      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a04:	2b60      	cmp	r3, #96	; 0x60
 8002a06:	d877      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b50      	cmp	r3, #80	; 0x50
 8002a0a:	d03c      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0xfa>
 8002a0c:	2b50      	cmp	r3, #80	; 0x50
 8002a0e:	d873      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d058      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x13a>
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d86f      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b30      	cmp	r3, #48	; 0x30
 8002a1a:	d064      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a1c:	2b30      	cmp	r3, #48	; 0x30
 8002a1e:	d86b      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d060      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d867      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d05c      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d05a      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a30:	e062      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f000 f96a 	bl	8002d1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
      break;
 8002a5e:	e04f      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f000 f953 	bl	8002d1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a82:	609a      	str	r2, [r3, #8]
      break;
 8002a84:	e03c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f000 f8ca 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2150      	movs	r1, #80	; 0x50
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f921 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e02c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 f8e8 	bl	8002c88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2160      	movs	r1, #96	; 0x60
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f911 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e01c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f000 f8aa 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f901 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002ae4:	e00c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f000 f8f8 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002af6:	e003      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e000      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
	...

08002b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <TIM_Base_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x28>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x28>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <TIM_Base_SetConfig+0xc4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <TIM_Base_SetConfig+0xc0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_Base_SetConfig+0x52>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x52>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <TIM_Base_SetConfig+0xc4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <TIM_Base_SetConfig+0xc0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400

08002c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 030a 	bic.w	r3, r3, #10
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0210 	bic.w	r2, r3, #16
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	621a      	str	r2, [r3, #32]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f043 0307 	orr.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	021a      	lsls	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e041      	b.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10c      	bne.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400

08002e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <__libc_init_array>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	2600      	movs	r6, #0
 8002e30:	4d0c      	ldr	r5, [pc, #48]	; (8002e64 <__libc_init_array+0x38>)
 8002e32:	4c0d      	ldr	r4, [pc, #52]	; (8002e68 <__libc_init_array+0x3c>)
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	42a6      	cmp	r6, r4
 8002e3a:	d109      	bne.n	8002e50 <__libc_init_array+0x24>
 8002e3c:	f000 f822 	bl	8002e84 <_init>
 8002e40:	2600      	movs	r6, #0
 8002e42:	4d0a      	ldr	r5, [pc, #40]	; (8002e6c <__libc_init_array+0x40>)
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <__libc_init_array+0x44>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	42a6      	cmp	r6, r4
 8002e4c:	d105      	bne.n	8002e5a <__libc_init_array+0x2e>
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e54:	4798      	blx	r3
 8002e56:	3601      	adds	r6, #1
 8002e58:	e7ee      	b.n	8002e38 <__libc_init_array+0xc>
 8002e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5e:	4798      	blx	r3
 8002e60:	3601      	adds	r6, #1
 8002e62:	e7f2      	b.n	8002e4a <__libc_init_array+0x1e>
 8002e64:	08002ec4 	.word	0x08002ec4
 8002e68:	08002ec4 	.word	0x08002ec4
 8002e6c:	08002ec4 	.word	0x08002ec4
 8002e70:	08002ec8 	.word	0x08002ec8

08002e74 <memset>:
 8002e74:	4603      	mov	r3, r0
 8002e76:	4402      	add	r2, r0
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <memset+0xa>
 8002e7c:	4770      	bx	lr
 8002e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e82:	e7f9      	b.n	8002e78 <memset+0x4>

08002e84 <_init>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr

08002e90 <_fini>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr
